#!/bin/bash
set -e

if [ ! -f kernel/Makefile ]; then
    exit 0
fi

cd kernel/

TEMP=$(getopt -o 'c:' --long 'config:' -n 'mkosi.build' -- "$@")
if [ $? -ne 0 ]; then
        echo 'Terminating...' >&2
        exit 1
fi

eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
        '-c'|'--config')
            CONFIG="$2"
            shift 2
            continue
        ;;
        '--')
            shift
            break
        ;;
        *)
            echo 'Internal error!' >&2
            exit 1
        ;;
    esac
done

if [ -z "$CONFIG" ]; then
    if [ -f kernel/mkosi.kernel.config ]; then
        CONFIG=kernel/mkosi.kernel.config
    else
        CONFIG=mkosi.kernel.config
    fi
fi

if [ ! -f "$SRCDIR/$CONFIG" ]; then
    echo "Kernel config not found at $CONFIG" >&2
    exit 1
fi

echo "Using kernel config $CONFIG"

collect_files()
{
    local file res=

    for file; do
        case "$file" in
        *\~*)
            continue
            ;;
        esac
        if test -e "$file"; then
            res="$res$(cat "$file")"
        fi
    done
    echo "$res"
}

FILE_LOCALVERSION="$(collect_files localversion*)"
CONFIG_LOCALVERSION=$(sed -n 's/^CONFIG_LOCALVERSION=\(.*\)$/\1/p' "$SRCDIR/$CONFIG")

BUILDDIR="$BUILDDIR/kernel/${FILE_LOCALVERSION}${CONFIG_LOCALVERSION}${LOCALVERSION}"

echo "Using kernel build directory $BUILDDIR"
mkdir -p "$BUILDDIR"

# Prevent a distro's custom installkernel script from being used.
if [ -x /sbin/installkernel ]; then
    mount --bind /dev/null /sbin/installkernel
fi

EXTRA="O=$BUILDDIR"

if ((LLVM)); then
    EXTRA="$EXTRA LLVM=1"
fi

if [ ! -f "$BUILDDIR/.config" ] || \
   [ ! -e "$BUILDDIR/mkosi.kernel.config.previous" ] || \
   ! cmp --silent "$SRCDIR/$CONFIG" "$BUILDDIR/mkosi.kernel.config.previous" || \
   [ -n "$(make -s O=$BUILDDIR listnewconfig)" ]; then
    cp "$SRCDIR/$CONFIG" "$BUILDDIR/mkosi.kernel.config.previous"
    make KCONFIG_ALLCONFIG="$SRCDIR/$CONFIG" O=$BUILDDIR alldefconfig
fi

# Ensure fast incremental builds by fixating these values which usually change for each build.
export KBUILD_BUILD_TIMESTAMP="Fri Jun  5 15:58:00 CEST 2015"
export KBUILD_BUILD_HOST="mkosi"
export KBUILD_BUILD_USER="mkosi"

make $EXTRA -j "$(nproc)"
make $EXTRA -j "$(nproc)" headers

# FIXME: Re-enable when coreutils 9.5 gets into debian testing.
. /usr/lib/os-release
if [ ! "$ID" = "debian" ]; then
    make $EXTRA INSTALL_HDR_PATH="$DESTDIR/usr" headers_install
fi

if [ "$ARCHITECTURE" = "arm64" ]; then
    INSTALL="zinstall"
else
    INSTALL="install"
fi

KERNEL_RELEASE=$(make $EXTRA -s kernelrelease)
mkdir -p "$DESTDIR/usr/lib/modules/$KERNEL_RELEASE"
make $EXTRA INSTALL_MOD_PATH="$DESTDIR/usr" modules_install
make $EXTRA INSTALL_PATH="$DESTDIR/usr/lib/modules/$KERNEL_RELEASE" "$INSTALL"

if [ -n "$SELFTESTS" ]; then
    if [ -n "$SELFTESTS_TARGETS" ]; then
        SELFTESTS_TARGETS="TARGETS=$SELFTESTS_TARGETS"
    else
        SELFTESTS_TARGETS=""
    fi

    if [ -n "$SELFTESTS_SKIP_TARGETS" ]; then
        SELFTESTS_SKIP_TARGETS="SKIP_TARGETS=$SELFTESTS_SKIP_TARGETS"
    else
        SELFTESTS_SKIP_TARGETS=""
    fi

    make -C tools/testing/selftests -j "$(nproc)" $EXTRA KSFT_INSTALL_PATH="$DESTDIR/usr/lib/kernel/selftests" $SELFTESTS_TARGETS $SELFTESTS_SKIP_TARGETS
    mkdir -p "$DESTDIR/usr/lib/kernel/selftests"
    make -C tools/testing/selftests -j "$(nproc)" $EXTRA KSFT_INSTALL_PATH="$DESTDIR/usr/lib/kernel/selftests" $SELFTESTS_TARGETS $SELFTESTS_SKIP_TARGETS install
    mkdir -p "$DESTDIR/usr/bin"
    ln -sf /usr/lib/kernel/selftests/bpf/bpftool "$DESTDIR/usr/bin/bpftool"
fi
